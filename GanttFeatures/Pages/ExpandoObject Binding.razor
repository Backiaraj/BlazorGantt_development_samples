@page "/expanddatao"

@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.Blazor.Navigations

<button @onclick="Delete">Delete Row</button>
<button @onclick="ZoomIn">Zoom In</button>
<button @onclick="ZoomOut">Zoom Out</button>
<button @onclick="ZoomToFit">ZoomToFit</button>
<button @onclick="ClearFiltering">Clear Filtering</button>
<button @onclick="ClearSorting">ClearSorting</button>
<button @onclick="CollapseAll">CollapseAll</button>
<button @onclick="ExpandAll">ExpandAll</button>
<button @onclick="Indent">Indent</button>
<button @onclick="Outdent">Outdent</button>
<button @onclick="OpenAddDialog">OpenAddDialog</button>

<SfGantt 
    @ref="Gantt"   
    TValue="ExpandoObject" 
    DataSource="@TreeData"
    Height="450px"
    Width="1200px"
    Toolbar="@(new List<string>() { "Add", "Cancel", "CollapseAll", "Delete", "Edit", "ExpandAll", "NextTimeSpan", "PrevTimeSpan", "Search", "Update" , "Indent" , "Outdent" ,"ZoomIn", "ZoomOut", "ZoomToFit"})"  
    AllowReordering="true" 
    ShowColumnMenu="true" 
    AllowSelection="true" 
    EnableContextMenu="true"
    AllowFiltering="true" 
    AllowSorting="true" 
    AllowResizing="true" 
    AllowUnscheduledTasks="true">

        <GanttTaskFields 
            Id="TaskID" 
            Name="TaskName" 
            StartDate="StartDate" 
            Duration="Duration"
            Progress="Progress" 
            Dependency="Predecessor" 
            ParentID="ParentID">
        </GanttTaskFields>

    <GanttEditSettings 
        AllowTaskbarEditing="true" 
        AllowEditing="true" 
        AllowAdding="true" 
        AllowDeleting="true" 
        Mode="Syncfusion.Blazor.Gantt.EditMode.Auto" 
        ShowDeleteConfirmDialog="true">
    </GanttEditSettings>

    <GanttTimelineSettings TimelineUnitSize=50 TimelineViewMode="TimelineViewMode.Month"></GanttTimelineSettings>

</SfGantt>

@code {
    public SfGantt<ExpandoObject> Gantt;

    public void Delete()
        {
        this.Gantt.DeleteRecord();
        }

    public void ZoomIn()
        {
        this.Gantt.ZoomIn();
        }

    public void ZoomOut()
        {
        this.Gantt.ZoomOut();
        }

    public void ZoomToFit()
        {
        this.Gantt.ZoomToFit();
        }

    public void ClearFiltering()
        {
        this.Gantt.ClearFiltering();    
        }
    
    public void ClearSorting()
        {
        this.Gantt.ClearSorting();    
        }
    
    public void CollapseAll()
        {
        this.Gantt.CollapseAll();    
        }
    
    public void ExpandAll()
        {
        this.Gantt.ExpandAll();    
        }

    public void Indent()
        {
        this.Gantt.Indent();    
        }

    public void Outdent()
        {
        this.Gantt.Outdent();    
        }

    public void OpenAddDialog()
        {
        this.Gantt.OpenAddDialog();    
        }

    public List<ExpandoObject> TreeData { get; set; }
    protected override void OnInitialized()
    {
        this.TreeData = GetData().ToList();
    }

    public static List<ExpandoObject> Data = new List<ExpandoObject>();
    public static int ParentRecordID { get; set; }
    public static int ChildRecordID { get; set; }
    public string Predecessor { get; set; }
public static List<ExpandoObject> GetData()
    {
    Data.Clear();
    ParentRecordID = 0;
    ChildRecordID = 0;
    for (var i = 1; i <= 10; i++)
    {
        Random ran = new Random();
        DateTime start = new DateTime(2020, 06, 07);
        int range = (DateTime.Today - start).Days;
        DateTime startingDate = start.AddDays(ran.Next(range));
        dynamic ParentRecord = new ExpandoObject();
        ParentRecord.TaskID = ++ParentRecordID;
        ParentRecord.TaskName = "Parent Task " + i;
        ParentRecord.StartDate = startingDate;
        ParentRecord.Progress = ran.Next(10, 100);
        ParentRecord.Duration = ParentRecordID % 2 == 0 ? (32).ToString() : (76).ToString();
        ParentRecord.ParentID = null;
       // ParentRecord.Predecessor = null;
        Data.Add(ParentRecord);
        AddChildRecords(ParentRecordID);
    }
    return Data;
}
public static void AddChildRecords(int ParentId)
{
    for (var i = 1; i < 5; i++)
    {
        Random ran = new Random();
        DateTime start = new DateTime(2020, 06, 07);
        int range = (DateTime.Today - start).Days;
        DateTime startingDate = start.AddDays(ran.Next(range));
        dynamic ChildRecord = new ExpandoObject();
        ChildRecord.TaskID = ++ParentRecordID;
        ChildRecord.TaskName = "Child Task " + ++ChildRecordID;
        ChildRecord.StartDate = startingDate;
        ChildRecord.Progress = ran.Next(10, 100);
        ChildRecord.Duration = ParentRecordID % 3 == 0 ? (64).ToString() : (98).ToString();
        ChildRecord.ParentID = ParentId;
        ChildRecord.Predecessor = i+"FS";
        Data.Add(ChildRecord);
    }
}
    public class ExpandoObject
{
    public int TaskID { get; set; }
    public string TaskName { get; set; }
    public DateTime? StartDate { get; set; }
    public string Predecessor { get; set; }
    public DateTime? EndDate { get; set; }
    public int Progress { get; set; }
    public string Duration { get; set; }
    public int? ParentID { get; set; }
    }
}