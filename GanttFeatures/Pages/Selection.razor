@page "/Selection"
@using Newtonsoft.Json;
@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.Blazor.DropDowns

<button @onclick="AllowSelection">AllowSelection</button>
<span> AllowSelection is : @SelectionValue </span>
<button @onclick="ClearSelection">ClearSelection</button>

<table><tr>
<td><SfGantt 
    @ref="Gantt" 
    DataSource="@TaskCollection" 
    Height="400px" 
    Width="700px" 
    AllowSelection="@SelectionValue" 
    SelectedRowIndex="@SelectedValue"
    EnableContextMenu="true">

    <GanttTaskFields 
        Id="TaskId" 
        Name="TaskName" 
        StartDate="StartDate" 
        EndDate="EndDate" 
        Duration="Duration" 
        Progress="Progress" 
        Child="SubTasks">
    </GanttTaskFields>

    <GanttSelectionSettings Mode="@GanttSelectMode" Type="@GanttSelectType" EnableToggle="@Toggle"></GanttSelectionSettings>

</SfGantt>
</td>
<td style="padding: 120px"><br>
Property Section
<div class="property-section">
     <div class="property-panel-section">
        <div class="property-panel-header sel-right">Properties</div><div class="property-panel-content sel-border" style="right:0">
            <table id="property" title="Properties" class="property-panel-table">
                <tbody>
                    <tr>
                        <td style="width: 50%";position: "relative">
                            <div class="userselect">Toggle</div>
                        </td>
                        <td style="width: 50%;padding-right: 10px">
                        <td style="width: 70%">
                            <div>
                                <SfDropDownList Width="100%" @ref="@DropdownToggle" TValue="string" TItem="DropDownData" DataSource="@SelectionToggle" @bind-Value="@DefaultToggle">
                                    <DropDownListEvents TValue="string" ValueChange="ToggleChange" TItem="DropDownData"></DropDownListEvents>
                                    <DropDownListFieldSettings Text="Mode" Value="ID"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        </td>
                        </td>
                    </tr>
                    <tr>
                        <td style="width: 50%">
                            <div class="userselect">Mode</div>
                        </td>
                        <td style="width: 50%;padding-right: 10px">
                        <td style="width: 70%">
                            <div>
                                <SfDropDownList Width="100%" @ref="@DropdownMode" TValue="string" TItem="DropDownData" DataSource="@SelectionModes" @bind-Value="@Mode">
                                    <DropDownListEvents TValue="string" ValueChange="ModeChange" TItem="DropDownData"></DropDownListEvents>
                                    <DropDownListFieldSettings Text="Mode" Value="ID"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        </td>
                        </td>
                    </tr>
                    <tr>
                        <td style="width: 50%">
                            <div class="userselect">Type</div>
                        </td>
                        <td style="width: 50%;padding-right: 10px">
                        <td style="width: 70%">
                            <div>
                                <SfDropDownList Width="100%" @ref="@DropdownType" TValue="string" TItem="DropDownData" DataSource="@SelectionTypes" @bind-Value="@Type">
                                    <DropDownListEvents TValue="string" ValueChange="TypeChange" TItem="DropDownData"></DropDownListEvents>
                                    <DropDownListFieldSettings Text="Mode" Value="ID"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        </td>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
</td></tr></table>
@code{
    public SfGantt<TaskData> Gantt;
    SfDropDownList<string, DropDownData> DropdownToggle { get; set; }
    public List<DropDownData> SelectionToggle { get; set; } = new List<DropDownData>();
    public Boolean SelectionValue = true;
    public Boolean Toggle = false;
    public int SelectedValue = -1;
    public List<double> SelectedRowIndexes { get; set; }
    public double[] TotalValue { get; set; }
    public string DefaultToggle;
    public class DropDownData
    {
        public string ID { get; set; }
        public string Mode { get; set; }
    }
    public void ToggleChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DropDownData> args)
    {
        if (args.Value == "False")
        {
            Toggle = false;
        }
        else if (args.Value == "True")
        {
            Toggle = true;
        }
    }
    SfDropDownList<string, DropDownData> DropdownMode { get; set; }
    public List<DropDownData> SelectionModes { get; set; } = new List<DropDownData>();
    public string Mode { get; set; }
    public void ModeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DropDownData> args)
    {
        if (args.Value == "Cell")
        {
            GanttSelectMode = Syncfusion.Blazor.Grids.SelectionMode.Cell;
        }
        if (args.Value == "Row")
        {
            GanttSelectMode = Syncfusion.Blazor.Grids.SelectionMode.Row;
        }
    }
    SfDropDownList<string, DropDownData> DropdownType { get; set; }
    public List<DropDownData> SelectionTypes { get; set; } = new List<DropDownData>();
    public string Type { get; set; }
    public void TypeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DropDownData> args)
    {
        if (args.Value == "Single")
        {
            GanttSelectType = Syncfusion.Blazor.Grids.SelectionType.Single;
        }
        if (args.Value == "Multiple")
        {
            GanttSelectType = Syncfusion.Blazor.Grids.SelectionType.Multiple;
        }
    }
    public Syncfusion.Blazor.Grids.SelectionMode GanttSelectMode { get; set; } = Syncfusion.Blazor.Grids.SelectionMode.Row;
    public Syncfusion.Blazor.Grids.SelectionType GanttSelectType { get; set; } = Syncfusion.Blazor.Grids.SelectionType.Single;
    public List<TaskData> TaskCollection { get; set; }
    
  
    //Clear Selection
    public void ClearSelection() 
        {
    this.Gantt.ClearSelectionAsync();
        }

    //Selection Disable 
    public void AllowSelection()
        {
        SelectionValue = SelectionValue ? false : true;
        }
    
    protected override void OnInitialized()
        {
        this.TaskCollection = GetTaskCollection();
        this.SelectionToggle.Add(new DropDownData() { ID = "True", Mode = "True" });
        this.SelectionToggle.Add(new DropDownData() { ID = "False", Mode = "False" });
        this.SelectionModes.Add(new DropDownData() { ID = "Row", Mode = "Row" });
        this.SelectionModes.Add(new DropDownData() { ID = "Cell", Mode = "Cell" });
        this.SelectionTypes.Add(new DropDownData() { ID = "Single", Mode = "Single" });
        this.SelectionTypes.Add(new DropDownData() { ID = "Multiple", Mode = "Multiple" });
        this.DefaultToggle = Toggle.ToString();
        this.Mode = (this.GanttSelectMode).ToString();
        this.Type = (this.GanttSelectType).ToString();
        }

    public class TaskData
    {
        public int TaskId { get; set; }
        public string TaskName { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Duration { get; set; }
        public int Progress { get; set; }
        public string Value { get; set; }
        public List<TaskData> SubTasks { get; set; }
    }

    public static List<TaskData> GetTaskCollection()
    {
        List<TaskData> Tasks = new List<TaskData>() {
        new TaskData() {
            TaskId = 1,
            TaskName = "Project initiation",
            StartDate = new DateTime(2019, 04, 02),
            EndDate = new DateTime(2019, 04, 21),
            SubTasks = (new List <TaskData> () {
                new TaskData() {
                    TaskId = 2,
                    TaskName = "Identify Site location",
                    StartDate = new DateTime(2019, 04, 02),
                    Duration = "0",
                    Progress = 30,
                },
                new TaskData() {
                    TaskId = 3,
                    TaskName = "Perform soil test",
                    StartDate = new DateTime(2019, 04, 02),
                    Duration = "4",
                    Progress = 40,
                },
                new TaskData() {
                    TaskId = 4,
                    TaskName = "Soil test approval",
                    StartDate = new DateTime(2019, 04, 02),
                    Duration = "0",
                    Progress = 30
                },
            })
        },
        new TaskData() {
            TaskId = 5,
            TaskName = "Project estimation",
            StartDate = new DateTime(2019, 04, 02),
            EndDate = new DateTime(2019, 04, 21),
            SubTasks = (new List <TaskData> () {
                new TaskData() {
                    TaskId = 6,
                    TaskName = "Develop floor plan for estimation",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "3",
                    Progress = 30,
                },
                new TaskData() {
                    TaskId = 7,
                    TaskName = "List materials",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "3",
                    Progress = 40
                },
                new TaskData() {
                    TaskId = 8,
                    TaskName = "Estimation approval",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "0",
                    Progress = 30,
                }
            })
        },
        new TaskData() {
            TaskId = 8,
            TaskName = "Project estimation",
            StartDate = new DateTime(2019, 04, 02),
            EndDate = new DateTime(2019, 04, 21),
            SubTasks = (new List <TaskData> () {
                new TaskData() {
                    TaskId = 10,
                    TaskName = "Develop floor plan for estimation",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "3",
                    Progress = 30,
                },
                new TaskData() {
                    TaskId = 11,
                    TaskName = "List materials",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "3",
                    Progress = 40
                },
                new TaskData() {
                    TaskId = 12,
                    TaskName = "Estimation approval",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "0",
                    Progress = 30,
                }
            })
        }
    };

        return Tasks;
    }
}