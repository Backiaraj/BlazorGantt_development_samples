@page "/DynamicObject"

@using Syncfusion.Blazor.Gantt
@using System.Dynamic
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.Blazor.Navigations

<button @onclick="Delete">Delete Row</button>
<button @onclick="ZoomIn">Zoom In</button>
<button @onclick="ZoomOut">Zoom Out</button>
<button @onclick="ZoomToFit">ZoomToFit</button>
<button @onclick="ClearFiltering">Clear Filtering</button>
<button @onclick="ClearSorting">ClearSorting</button>
<button @onclick="CollapseAll">CollapseAll</button>
<button @onclick="ExpandAll">ExpandAll</button>
<button @onclick="Indent">Indent</button>
<button @onclick="Outdent">Outdent</button>
<button @onclick="OpenAddDialog">OpenAddDialog</button>

<SfGantt 
    @ref="Gantt"        
    DataSource="@GanttDynamicData"  
    Toolbar="@(new List<string>() { "Add", "Cancel", "CollapseAll", "Delete", "Edit", "ExpandAll", "NextTimeSpan", "PrevTimeSpan", "Search", "Update" , "Indent" , "Outdent" ,"ZoomIn", "ZoomOut", "ZoomToFit"})" 
    AllowSelection="true" 
    EnableContextMenu="true" 
    AllowFiltering="true" 
    AllowSorting="true" 
    AllowResizing="true" 
    AllowUnscheduledTasks="true" 
    EnablePredecessorValidation="true" 
    ShowColumnMenu="true" 
    AllowReordering="true" 
    AllowRowDragAndDrop="true"
    Height="450px"
    Width="1200px" 
    HighlightWeekends="true">
    
    <GanttTaskFields 
        Id="TaskId" 
        Name="TaskName" 
        StartDate="StartDate" 
        Progress="Progress" 
        Duration="Duration" 
        Dependency="Predecessor" 
        ParentID="ParentId">
    </GanttTaskFields>

    <GanttColumns>
        <GanttColumn Field="TaskId" HeaderText="Task ID" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="100"></GanttColumn>
        <GanttColumn Field="TaskName" HeaderText="Task Name" Width="250"></GanttColumn>
        <GanttColumn Field="StartDate" HeaderText="Start Date" Width="250"></GanttColumn>
        <GanttColumn Field="Duration" HeaderText="Duration" Width="250"></GanttColumn>
        <GanttColumn Field="Predecessor" HeaderText="Dependency"></GanttColumn>
        <GanttColumn Field="Progress" HeaderText="Progress" Format="@NumberFormat" Width="250"></GanttColumn>
    </GanttColumns>

    <GanttEditSettings 
        AllowAdding="true" 
        AllowEditing="true"     
        AllowDeleting="true" 
        AllowTaskbarEditing="true" 
        ShowDeleteConfirmDialog="true">
    </GanttEditSettings>

    <GanttTimelineSettings TimelineViewMode="TimelineViewMode.Month"></GanttTimelineSettings>

</SfGantt>

    @code {
    public SfGantt<DynamicDictionary> Gantt;

    public void Delete()
        {
        this.Gantt.DeleteRecord();
        }

    public void ZoomIn()
        {
        this.Gantt.ZoomIn();
        }

    public void ZoomOut()
        {
        this.Gantt.ZoomOut();
        }

    public void ZoomToFit()
        {
        this.Gantt.ZoomToFit();
        }

    public void ClearFiltering()
        {
        this.Gantt.ClearFiltering();    
        }
    
    public void ClearSorting()
        {
        this.Gantt.ClearSorting();    
        }
    
    public void CollapseAll()
        {
        this.Gantt.CollapseAll();    
        }
    
    public void ExpandAll()
        {
        this.Gantt.ExpandAll();    
        }

    public void Indent()
        {
        this.Gantt.Indent();    
        }

    public void Outdent()
        {
        this.Gantt.Outdent();    
        }

    public void OpenAddDialog()
        {
        this.Gantt.OpenAddDialog();    
        }

    SfGantt<DynamicDictionary> GanttChart;
    public string NumberFormat = "C";
    public static List<DynamicDictionary> Data = new List<DynamicDictionary>();
    public List<DynamicDictionary> GanttDynamicData { get; set; }
    public static int ParentRecordID { get; set; }
    public static int ChildRecordID { get; set; }
    public string Predecessor { get; set; }

    protected override void OnInitialized()
    {
    this.GanttDynamicData = GetData().ToList();
    }

public static List<DynamicDictionary> GetData()
{
    Data.Clear();
    ParentRecordID = 0;
    ChildRecordID = 0;
    for (var i = 1; i <= 10; i++)
    {
        Random ran = new Random();
        DateTime start = new DateTime(2021, 01, 07);
        int range = (DateTime.Today - start).Days;
        DateTime startingDate = start.AddDays(ran.Next(range));
        dynamic ParentRecord = new DynamicDictionary();
        ParentRecord.TaskId = ++ParentRecordID;
        ParentRecord.TaskName = "Parent Task " + i;
        ParentRecord.StartDate = startingDate;
        ParentRecord.Progress = ran.Next(10, 100);
        ParentRecord.Duration = ParentRecordID % 2 == 0 ? (32).ToString() : (76).ToString();
        ParentRecord.ParentId = null;
        ParentRecord.Predecessor = null;
        Data.Add(ParentRecord);
        AddChildRecords(ParentRecordID);
    }
    return Data;
}

public static void AddChildRecords(int ParentId)
{
    for (var i = 1; i < 4; i++)
    {
        Random ran = new Random();
        DateTime start = new DateTime(2021, 01, 07);
        int range = (DateTime.Today - start).Days;
        DateTime startingDate = start.AddDays(ran.Next(range));
        dynamic ChildRecord = new DynamicDictionary();
        ChildRecord.TaskId = ++ParentRecordID;
        ChildRecord.TaskName = "Child Task " + ++ChildRecordID;
        ChildRecord.StartDate = startingDate;
        ChildRecord.Progress = ran.Next(10, 100);
        ChildRecord.Duration = ParentRecordID % 3 == 0 ? (64).ToString() : (98).ToString();
        ChildRecord.ParentId = ParentId;
        ChildRecord.Predecessor = i+"FS";
        Data.Add(ChildRecord);
    }
}

public class DynamicDictionary : DynamicObject
{
    Dictionary<string, object> dictionary = new Dictionary<string, object>();
    public override bool TryGetMember(GetMemberBinder binder, out object result)
    {
        string name = binder.Name;
        return dictionary.TryGetValue(name, out result);
    }

    public override bool TrySetMember(SetMemberBinder binder, object value)
    {
        dictionary[binder.Name] = value;
        return true;
    }

    public override System.Collections.Generic.IEnumerable<string> GetDynamicMemberNames()
    {
        return dictionary?.Keys;
    }
}
}